!pip install flask joblib nest_asyncio

1]import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import joblib
import pandas as pd

nltk.download('stopwords')
stop_words = stopwords.words('english')

data = {
    'text': ["I love this!", "I hate this!", "It's okay.", "This is fantastic!", "This is terrible!"],
    'sentiment': ["positive", "negative", "neutral", "positive", "negative"]
}

df = pd.DataFrame(data)
vectorizer = TfidfVectorizer(stop_words=stop_words)
X = vectorizer.fit_transform(df['text'])
y = df['sentiment']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

joblib.dump(model, 'sentiment_model.pkl')
joblib.dump(vectorizer, 'vectorizer.pkl')



2}from flask import Flask, request, jsonify
import joblib

app = Flask(__name__)

# Load trained model and vectorizer
model = joblib.load('sentiment_model.pkl')
vectorizer = joblib.load('vectorizer.pkl')

@app.route('/chat', methods=['POST'])
def chat():
    user_input = request.json.get('message')
    user_vect = vectorizer.transform([user_input])
    sentiment = model.predict(user_vect)[0]

    if sentiment == 'positive':
        response = "I'm glad to hear that!"
    elif sentiment == 'negative':
        response = "I'm sorry to hear that."
    else:
        response = "Thanks for sharing."

    return jsonify({"response": response})

if __name__ == '__main__':
    app.run(debug=True)


3]import nest_asyncio
nest_asyncio.apply()

from flask import Flask, request, jsonify
import joblib

app = Flask(__name__)

# Load trained model and vectorizer
model = joblib.load('sentiment_model.pkl')
vectorizer = joblib.load('vectorizer.pkl')

@app.route('/chat', methods=['POST'])
def chat():
    user_input = request.json.get('message')
    user_vect = vectorizer.transform([user_input])
    sentiment = model.predict(user_vect)[0]

    if sentiment == 'positive':
        response = "I'm glad to hear that!"
    elif sentiment == 'negative':
        response = "I'm sorry to hear that."
    else:
        response = "Thanks for sharing."

    return jsonify({"response": response})

if __name__ == '__main__':
    app.run()


Bash codes:curl -X POST http://127.0.0.1:5000/chat -H "Content-Type: application/json" -d '{"message": "I love this!"}'
